<!--
  Xceed DataGrid for WPF - SAMPLE CODE - Summaries & Statistics Sample Application
  Copyright (c) 2007-2009 Xceed Software Inc.

  [TableViewTemplates.xaml]

  This Page contains the various templates that will be added programmatically 
  to the grid and group headers and footers, in TableView.

  This file is part of the Xceed DataGrid for WPF product. The use 
  and distribution of this Sample Code is subject to the terms 
  and conditions referring to "Sample Code" that are specified in 
  the XCEED SOFTWARE LICENSE AGREEMENT accompanying this product.
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">

    <!-- This StatCell Style will display, above the result, a line or a double line 
        depending on whether the StatCell is in a group or not. -->
    <Style x:Key="tableViewTotalStatCellStyle"
          TargetType="xcdg:StatCell">

        <!-- The line(s) will be of the same color as the HorizontalGridLine. -->
        <Setter Property="BorderBrush"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).HorizontalGridLineBrush}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="xcdg:StatCell">
                    <Border Background="{TemplateBinding Background}"
                       BorderBrush="{TemplateBinding BorderBrush}"
                       BorderThickness="{TemplateBinding BorderThickness}"
                       Padding="{TemplateBinding Padding}">
                        <StackPanel>
                            <Border x:Name="totalBorder"
                             BorderBrush="{TemplateBinding BorderBrush}"
                             BorderThickness="0,1,0,0"/>

                            <xcdg:CellContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </StackPanel>
                    </Border>

                    <ControlTemplate.Triggers>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.Visible}"
                               Value="False">
                            <Setter Property="Visibility"
                             Value="Collapsed"/>
                        </DataTrigger>

                        <!-- When the StatCell is not inside a Group, display a double line. -->
                        <Trigger Property="xcdg:GroupLevelIndicatorPane.GroupLevel"
                           Value="-1">
                            <Setter TargetName="totalBorder"
                             Property="BorderThickness"
                             Value="0,1,0,1"/>

                            <Setter TargetName="totalBorder"
                             Property="Padding"
                             Value="0,2,0,0"/>
                        </Trigger>

                        <!-- When the StatCell has no content, don't display any line above. -->
                        <Trigger Property="HasContent"
                           Value="False">
                            <Setter TargetName="totalBorder"
                             Property="BorderThickness"
                             Value="0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <xcdg:CurrencyConverter x:Key="currencyConverter" />

    <!--A cell content template that will be used for cell that contain currency value-->
    <DataTemplate x:Key="currencyCellContentTemplate">
        <TextBlock Text="{Binding Converter={StaticResource currencyConverter}}" />
    </DataTemplate>

    <!-- A GroupConfiguration allows you to control the content (headers/footers) 
        and behavior of same-level groups. 
           
        This GroupConfiguration will be added to the TableView in code and will 
        dictate the behavior and content of the groups. -->
    <xcdg:GroupConfiguration x:Key="tableViewGroupConfiguration1">
        <xcdg:GroupConfiguration.Footers>
            <!-- The groups will contain a StatRow visible even when the group 
                 is collapsed. -->
            <xcdg:GroupHeaderFooterItemTemplate VisibleWhenCollapsed="True">
                <DataTemplate>
                    <xcdg:StatRow>
                        <xcdg:StatCell FieldName="Amount"
                                       ResultPropertyName="SumOfAmount"
                                       Style="{StaticResource tableViewTotalStatCellStyle}" />
                        <xcdg:StatCell FieldName="Subtotal"
                                       ResultPropertyName="SumOfSubtotal"
                                       Style="{StaticResource tableViewTotalStatCellStyle}" 
                                       ContentTemplate="{StaticResource currencyCellContentTemplate}" />
                    </xcdg:StatRow>
                </DataTemplate>
            </xcdg:GroupHeaderFooterItemTemplate>
        </xcdg:GroupConfiguration.Footers>
    </xcdg:GroupConfiguration>
    
    <xcdg:GroupConfiguration x:Key="tableViewGroupConfiguration2">
        <xcdg:GroupConfiguration.Footers>
            <!-- The groups will contain a StatRow visible even when the group 
                 is collapsed. -->
            <xcdg:GroupHeaderFooterItemTemplate VisibleWhenCollapsed="True">
                <DataTemplate>
                    <xcdg:StatRow>
                        <xcdg:StatCell FieldName="Amount"
                                       ResultPropertyName="SumOfAmount"
                                       Style="{StaticResource tableViewTotalStatCellStyle}" />
                    </xcdg:StatRow>
                </DataTemplate>
            </xcdg:GroupHeaderFooterItemTemplate>
        </xcdg:GroupConfiguration.Footers>
    </xcdg:GroupConfiguration>

    <!-- This template will be added to the TableView in code. -->
    <DataTemplate x:Key="tableViewFixedFooter1">
        <xcdg:StatRow>
            <xcdg:StatRow.Resources>
                <Style TargetType="xcdg:StatCell"
                   BasedOn="{StaticResource tableViewTotalStatCellStyle}"/>
            </xcdg:StatRow.Resources>

            <!-- Each StatCell has a default StatResultConverter assigned to it, 
              allowing only a ConverterParameter that will format
              the result to be specified. To improve its usage in XAML, the StatResultConverter's
              parameter supports a simplified syntax of composite formatting. 
              Refer to the documentation for more informations. -->
            <!--<xcdg:StatCell FieldName="Amount"
                           ResultPropertyName="SumOfAmount"
                           Style="{StaticResource tableViewTotalStatCellStyle}" />-->

            <xcdg:StatCell FieldName="Subtotal"
                           ResultPropertyName="SumOfSubtotal"
                           Style="{StaticResource tableViewTotalStatCellStyle}" 
                           ContentTemplate="{StaticResource currencyCellContentTemplate}" />
        </xcdg:StatRow>
    </DataTemplate>
    <!-- This template will be added to the TableView in code. -->
    <DataTemplate x:Key="tableViewFixedFooter2">
        <xcdg:StatRow>
            <xcdg:StatRow.Resources>
                <Style TargetType="xcdg:StatCell"
                   BasedOn="{StaticResource tableViewTotalStatCellStyle}"/>
            </xcdg:StatRow.Resources>

            <!-- Each StatCell has a default StatResultConverter assigned to it, 
              allowing only a ConverterParameter that will format
              the result to be specified. To improve its usage in XAML, the StatResultConverter's
              parameter supports a simplified syntax of composite formatting. 
              Refer to the documentation for more informations. -->
            <!--<xcdg:StatCell FieldName="Amount"
                           ResultPropertyName="SumOfAmount" />-->
        </xcdg:StatRow>
    </DataTemplate>
    
</ResourceDictionary>